// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  numberDocument        String              @map("number_document")           @db.VarChar @unique
  typeDocument          TypeDocument        @map("type_document")             @default(DNI)
  name                  String                                                @db.VarChar
  lastName              String              @map("last_name")                 @db.VarChar
  email                 String?                                               @db.VarChar @unique
  active                Boolean                                               @default(true)
  codeActivation        String?             @map("code_activation")           @db.VarChar
  createdAt             DateTime            @map("created_at")                @default(now())
  updatedAt             DateTime            @map("updated_at")                @updatedAt
  customer              Customer?
  staff                 Staff?
  sessions              Session[]
  forgotPasswords       forgotPassword[]
  auditLogs             AuditLog[]
  @@map("users")  
}
model Staff {
  userId                String              @map("user_id")                   @db.Uuid @unique
  roleId                String              @map("role_id")                   @db.Uuid
  password              String                                                @db.VarChar
  active                Boolean                                               @default(true)
  createdAt             DateTime            @map("created_at")                @default(now())
  updatedAt             DateTime            @map("updated_at")                @updatedAt
  user                  User                @relation(fields: [userId], references: [id])
  role                  Role                @relation(fields: [roleId], references: [id])
  branches              Branch[]
  cashClosures          CashClosure[]
  @@map("staffs")
  @@id([userId])
}
model Role {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                                                @db.VarChar
  active                Boolean                                               @default(true)
  createdAt             DateTime            @map("created_at")                @default(now())
  updatedAt             DateTime            @map("updated_at")                @updatedAt
  permissions           Permission[]
  staffs                Staff[]
  @@map("roles")
}
model Permission {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId                String              @map("role_id")                   @db.Uuid
  action                TypeAction
  subject               TypeSubject
  inverted              Boolean                                               @default(false)
  conditions            Json?                                                 @db.JsonB
  reason                String?                                               @db.Text
  active                Boolean                                               @default(true)
  createdAt             DateTime            @map("created_at")                @default(now())
  updatedAt             DateTime            @map("updated_at")                @updatedAt
  role                  Role                @relation(fields: [roleId], references: [id])
  @@map("permissions")
}
model CashClosure {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String              @map("user_id")                     @db.Uuid
  endTime               DateTime            @map("end_time") 
  totalAmount           Float               @map("total_amount")                @default(0.0)
  createdAt             DateTime            @map("created_at")                  @default(now())
  staff                 Staff               @relation(fields: [userId], references: [userId])
  orers                 Order[]
  @@map("cash_closures")
}
model forgotPassword {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String              @map("user_id")                     @db.Uuid
  code                  String                                                  @db.VarChar
  createdAt             DateTime            @map("created_at")                  @default(now())
  updatedAt             DateTime            @map("updated_at")                  @updatedAt
  user                  User                @relation(fields: [userId], references: [id])
  @@map("forgot_passwords")
}
model Session {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String              @map("user_id")                     @db.Uuid
  token                 String                                                  @db.VarChar @unique
  ipAddress             String              @map("ip_address")                  @db.VarChar
  userAgent             String              @map("user_agent")                  @db.VarChar
  createdAt             DateTime            @map("created_at")                  @default(now())
  updatedAt             DateTime            @map("updated_at")                  @updatedAt
  user                  User                @relation(fields: [userId], references: [id])
  @@map("sessions")
}
model Customer {
  userId                String              @map("user_id")                     @db.Uuid @unique
  active                Boolean                                                 @default(true)
  createdAt             DateTime            @map("created_at")                  @default(now())
  updatedAt             DateTime            @map("updated_at")                  @updatedAt
  user                  User                @relation(fields: [userId], references: [id])
  orers                 Order[]
  @@map("customers")
}
model Category {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                                                  @db.VarChar
  active                Boolean                                                 @default(true)
  createdAt             DateTime            @map("created_at")                  @default(now())
  updatedAt             DateTime            @map("updated_at")                  @updatedAt
  products              Product[]
  @@map("categories")
}
model Product {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId            String              @map("category_id")                 @db.Uuid
  code                  String?                                                 @db.VarChar
  name                  String                                                  @db.VarChar
  image                 String?                                                 @db.VarChar
  barCode               String?             @map("bar_code")                    @db.VarChar
  visible               Boolean                                                 @default(true)
  active                Boolean                                                 @default(true)
  createdAt             DateTime            @map("created_at")                  @default(now())
  updatedAt             DateTime            @map("updated_at")                  @updatedAt
  category              Category            @relation(fields: [categoryId], references: [id])
  productPresentations  ProductPresentation[]
  unitConversions       UnitConversion[]
  @@map("products")
}
model ProductPresentation {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId             String              @map("product_id")                  @db.Uuid 
  branchId              String              @map("branch_id")                   @db.Uuid
  name                  String              @map("name")                        @db.VarChar
  typeUnit              TypeUnit            @map("type_unit") 
  active                Boolean                                                 @default(true)
  product               Product             @relation(fields: [productId], references: [id])
  branch                Branch              @relation(fields: [branchId], references: [id])
  prices                Price[]
  inputs                Input[]
  outputs               Output[]
  kardexs               Kardex[]
  transfers             Transfer[]
  @@unique([productId, branchId, typeUnit])
  @@map("product_presentations")
}
model Price {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productPresentationId String                @map("product_presentation_id")   @db.Uuid
  price                 Float                                                   @default(0.0)  
  discount              Float                                                   @default(0.0)
  typeDiscount          TypeDiscount          @map("type_discount")             @default(MONTO)
  changedReason         String                @map("changed_reason")            @default("creado")
  active                Boolean                                                 @default(true)
  createdAt             DateTime              @map("created_at")                @default(now())
  productPresentation   ProductPresentation   @relation(fields: [productPresentationId], references: [id])
  @@map("prices")
}
model UnitConversion {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId             String                @map("product_id")                @db.Uuid
  fromUnit              TypeUnit              @map("from_unit") 
  toUnit                TypeUnit              @map("to_unit") 
  factor                Int
  product               Product               @relation(fields: [productId], references: [id])
  @@unique([productId, fromUnit, toUnit])
  @@map("unit_conversions")
}
model Branch {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                                                  @db.VarChar
  address               String?                                                 @db.VarChar
  phone                 String?                                                 @db.VarChar
  active                Boolean                                                 @default(true)
  createdAt             DateTime              @map("created_at")                @default(now())
  updatedAt             DateTime              @map("updated_at")                @updatedAt
  staffs                Staff[]
  karedxs               Kardex[]
  inputs                Input[]
  outputs               Output[]
  orders                Order[]
  productPresentations  ProductPresentation[]
  fromTransfers         Transfer[]            @relation("TransferFromBranch")
  toTransfers           Transfer[]            @relation("TransferToBranch")

  @@map("branches")
}
model Input {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId              String                @map("branch_id")                 @db.Uuid
  transferId            String?               @map("transfer_id")               @db.Uuid
  productPresentationId String                @map("product_presentation_id")   @db.Uuid
  quantity              Int                                                     @db.Integer
  price                 Float                                                   @default(0.0)
  dueDate               DateTime?             @map("due_date")                  @db.Date
  detail                String                                                  @db.VarChar
  createdAt             DateTime              @map("created_at")                @default(now())
  branch                Branch                @relation(fields: [branchId], references: [id])
  transfer              Transfer?             @relation(fields: [transferId], references: [id])
  productPresentation   ProductPresentation   @relation(fields: [productPresentationId], references: [id])
  @@map("inputs")
}
model Output {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId              String                @map("branch_id")                 @db.Uuid
  orderId               String?               @map("order_id")                  @db.Uuid
  transferId            String?               @map("transfer_id")               @db.Uuid
  productPresentationId String                @map("product_presentation_id")   @db.Uuid
  quantity              Int                                                     @db.Integer
  price                 Float                                                   @default(0.0)
  detail                String                                                  @db.VarChar
  createdAt             DateTime              @map("created_at")                @default(now())
  branch                Branch                @relation(fields: [branchId], references: [id])
  order                 Order?                @relation(fields: [orderId], references: [id])
  transfer              Transfer?             @relation(fields: [transferId], references: [id])
  productPresentation   ProductPresentation   @relation(fields: [productPresentationId], references: [id])
  @@map("outputs")
}
model Kardex {
  branchId              String                @map("branch_id")                 @db.Uuid
  productPresentationId String                @map("product_presentation_id")   @db.Uuid
  referenceId           String                @map("reference_id")              @db.Uuid
  typeReference         TypeReference         @map("type_reference")
  stock                 Int                                                     @db.Integer
  createdAt             DateTime              @map("created_at")                @default(now())
  productPresentation   ProductPresentation   @relation(fields: [productPresentationId], references: [id])
  branch                Branch                @relation(fields: [branchId], references: [id])
  @@unique([referenceId,typeReference])
  @@map("kardexs")
}
model Transfer {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fromBranchId          String                @map("from_branch_id")            @db.Uuid
  toBranchId            String                @map("to_branch_id")              @db.Uuid
  productPresentationId String                @map("product_presentation_id")   @db.Uuid
  quantity              Int                                                     @db.Integer
  price                 Float                                                   @default(0.0)
  detail                String?                                                 @db.VarChar
  createdAt             DateTime              @map("created_at")                @default(now())
  fromBranch            Branch                @relation("TransferFromBranch", fields: [fromBranchId], references: [id])
  toBranch              Branch                @relation("TransferToBranch", fields: [toBranchId], references: [id])
  productPresentation   ProductPresentation   @relation(fields: [productPresentationId], references: [id])
  outputs               Output[]
  inputs                Input[]
  @@map("transfers")
}
model Order {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId            String                @map("customer_id")               @db.Uuid
  branchId              String                @map("branch_id")                 @db.Uuid
  closureId             String?               @map("closure_id")                @db.Uuid 
  amount                Float                                                   @default(0.0)
  active                Boolean                                                 @db.Boolean @default(true)
  createdAt             DateTime              @map("created_at")                @default(now())
  updatedAt             DateTime              @map("updated_at")                @updatedAt
  customer              Customer              @relation(fields: [customerId], references: [userId])
  branch                Branch                @relation(fields: [branchId], references: [id])
  closure               CashClosure?          @relation(fields: [closureId], references: [id])
  outputs               Output[]
  @@map("orders")
}
model AuditLog {
  id                    String                                                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String                @map("user_id")                   @db.Uuid
  action                String                                                  // 'CREATE', 'UPDATE', 'DELETE'
  entity                String                                                  // Nombre de la tabla: 'Price', 'Product', etc.
  entityId              String                @map("entity_id")                 @db.Uuid
  dataBefore            Json?                 @map("data_before")               // Estado anterior (si aplica)
  dataAfter             Json?                 @map("data_after")                // Estado nuevo (si aplica)
  timestamp             DateTime                                                @default(now())
  description           String?                                                 // Mensaje opcional ("Cambio de precio por inflación")
  user                  User                  @relation(fields: [userId], references: [id])
  @@map("audit_logs")
}

// emuns section
enum TypeDocument {
  DNI
  RUC
  PASAPORTE
}
enum TypeDiscount {
  MONTO
  PORCENTAJE
}
enum TypeUnit {
  UNIDAD
  LIBRA
  KILO
  CAJA
  DOCENA
}
enum TypeReference {
  inputs
  outputs
}

enum TypeAction {
  manage
  create
  read
  update
  delete
}

enum TypeSubject {
  all
  branch
  category
  customer
  input
  kardex
  order
  permission
  product
  role
  staff
  user
  presentation
  price
  output
  transfer
}